---
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/Navbar.astro';
import { createUrl } from '../lib/utils';
---

<Layout title="Loading - NotFlix">
  <Navbar />
  
  <!-- Loading Screen -->
  <div id="loading-screen" class="min-h-screen flex items-center justify-center">
    <div class="text-center">
      <div class="animate-spin rounded-full h-16 w-16 border-b-2 border-red-600 mx-auto mb-4"></div>
      <p class="text-white text-xl">Loading content...</p>
    </div>
  </div>

  <!-- Error Screen -->
  <div id="error-screen" class="min-h-screen flex items-center justify-center hidden">
    <div class="text-center">
      <i class="fas fa-exclamation-triangle text-6xl text-red-600 mb-6"></i>
      <h1 class="text-3xl font-bold text-white mb-4">Content Not Found</h1>
      <p class="text-gray-400 mb-8">
        The requested content could not be found.
      </p>
      <a href={createUrl("/")} class="btn-primary">
        <i class="fas fa-home mr-2"></i>
        Back to Home
      </a>
    </div>
  </div>

  <!-- Content (will be populated by JavaScript) -->
  <div id="content-wrapper" class="hidden">
    <!-- Hero Section -->
    <section id="hero-section" class="relative h-[70vh] flex items-end overflow-hidden">
      <div id="backdrop" class="absolute inset-0 bg-cover bg-center"></div>
      <div class="absolute inset-0 bg-gradient-to-t from-gray-900 via-gray-900/70 to-transparent"></div>
      
      <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-16">
        <div class="flex flex-col md:flex-row gap-8 items-end">
          <!-- Poster -->
          <div class="flex-shrink-0">
            <img 
              id="content-poster"
              alt="Poster"
              class="w-64 h-96 object-cover rounded-lg shadow-2xl"
            />
          </div>
          
          <!-- Content Info -->
          <div class="flex-1 text-white">
            <h1 id="content-title" class="text-4xl md:text-6xl font-bold mb-4 text-shadow"></h1>
            
            <div id="content-meta" class="flex flex-wrap items-center gap-4 mb-6 text-lg"></div>
            
            <div id="content-genres" class="flex flex-wrap gap-2 mb-6"></div>
            
            <div id="action-buttons" class="flex flex-wrap gap-4">
              <a id="watch-now-btn" class="btn-primary text-lg px-8 py-3 no-underline">
                <i class="fas fa-play mr-2"></i>
                Watch Now
              </a>
              <button id="select-episode-btn" class="btn-secondary text-lg px-8 py-3 hidden">
                <i class="fas fa-list mr-2"></i>
                Select Episode
              </button>
              <button id="find-streaming-btn" class="btn-secondary text-lg px-8 py-3">
                <i class="fas fa-external-link-alt mr-2"></i>
                Find Streaming
              </button>
            </div>
          </div>
        </div>
      </div>
    </section>
    
    <!-- Episode Selector Section (Hidden by default) -->
    <section id="episode-selector" class="bg-gray-800 border-t border-gray-700 transition-all duration-500 ease-in-out hidden">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-3xl font-bold text-white">Episodes</h2>
          <button id="close-episode-selector" class="text-gray-400 hover:text-white transition-colors">
            <i class="fas fa-times text-xl"></i>
          </button>
        </div>
        
        <!-- Season Tabs -->
        <div id="season-tabs" class="flex flex-wrap gap-2 mb-6 border-b border-gray-600 pb-4"></div>
        
        <!-- Episode Grid -->
        <div id="episode-grid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4"></div>
        
        <!-- Loading State -->
        <div id="episodes-loading" class="text-center py-12 hidden">
          <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-red-600 mx-auto mb-4"></div>
          <p class="text-gray-400">Loading episodes...</p>
        </div>
      </div>
    </section>
    
    <!-- Details Section -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
      
      <!-- Overview -->
      <section class="mb-12">
        <h2 class="text-3xl font-bold text-white mb-6">Overview</h2>
        <p id="content-overview" class="text-lg text-gray-300 leading-relaxed max-w-4xl"></p>
      </section>
      
      <!-- Cast -->
      <section class="mb-12">
        <h2 class="text-3xl font-bold text-white mb-6">Cast</h2>
        <div id="cast-grid" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-6"></div>
      </section>
      
      <!-- Details -->
      <section class="mb-12">
        <h2 class="text-3xl font-bold text-white mb-6">Details</h2>
        <div id="content-details" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"></div>
      </section>
      
    </main>
  </div>
</Layout>

<script define:vars={{ 
  basePath: import.meta.env.BASE_URL || '/', 
  apiKey: import.meta.env.PUBLIC_TMDB_API_KEY,
  tmdbBaseUrl: import.meta.env.PUBLIC_TMDB_BASE_URL || 'https://api.themoviedb.org/3',
  tmdbImageBaseUrl: import.meta.env.PUBLIC_TMDB_IMAGE_BASE_URL || 'https://image.tmdb.org/t/p'
}}>
  // Global variables
  window.currentContent = null;
  window.basePath = basePath;
  
  // API configuration
  const API_KEY = apiKey;
  const BASE_URL = tmdbBaseUrl;
  const IMAGE_BASE_URL = tmdbImageBaseUrl;
  
  let currentSeason = 1;
  let isEpisodeSelectorOpen = false;
  let contentType, contentId;
  
  // Parse URL to get content type and ID
  function parseUrl() {
    const urlParams = new URLSearchParams(window.location.search);
    const type = urlParams.get('type');
    const id = urlParams.get('id');
    
    if (!type || !id) {
      // Try to parse from hash if no query params
      const hash = window.location.hash.substring(1);
      const parts = hash.split('/');
      if (parts.length >= 2) {
        return { type: parts[0], id: parts[1] };
      }
      return null;
    }
    
    return { type, id };
  }
  
  // Utility functions
  function getImageUrl(path, size = 'w500') {
    if (!path) return '/images/placeholder-poster.jpg';
    return `${IMAGE_BASE_URL}/${size}${path}`;
  }
  
  function formatDate(dateString) {
    if (!dateString) return 'Unknown';
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  }
  
  function formatRuntime(minutes) {
    if (!minutes) return 'Unknown';
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return hours === 0 ? `${mins}m` : `${hours}h ${mins}m`;
  }
  
  function createUrl(path) {
    const cleanPath = path.startsWith('/') ? path.slice(1) : path;
    const baseWithSlash = basePath.endsWith('/') ? basePath : `${basePath}/`;
    return `${baseWithSlash}${cleanPath}`;
  }
  
  // Fetch content data
  async function fetchContentData(type, id) {
    try {
      const endpoint = type === 'movie' ? `/movie/${id}` : `/tv/${id}`;
      const creditsEndpoint = `${endpoint}/credits`;
      
      const [contentResponse, creditsResponse] = await Promise.all([
        fetch(`${BASE_URL}${endpoint}?api_key=${API_KEY}`),
        fetch(`${BASE_URL}${creditsEndpoint}?api_key=${API_KEY}`)
      ]);
      
      if (!contentResponse.ok || !creditsResponse.ok) {
        throw new Error(`${type === 'movie' ? 'Movie' : 'TV show'} not found`);
      }
      
      const content = await contentResponse.json();
      const credits = await creditsResponse.json();
      
      window.currentContent = content;
      
      return { content, cast: credits.cast.slice(0, 10) };
    } catch (error) {
      console.error('Error fetching content data:', error);
      throw error;
    }
  }
  
  // Populate content
  function populateContent(content, cast, type) {
    const backdropUrl = content.backdrop_path 
      ? getImageUrl(content.backdrop_path, 'original')
      : getImageUrl(content.poster_path, 'original');
    
    const posterUrl = getImageUrl(content.poster_path, 'w500');
    const title = type === 'movie' ? content.title : content.name;
    
    // Update page title
    document.title = `${title} - NotFlix`;
    
    // Backdrop
    document.getElementById('backdrop').style.backgroundImage = `url('${backdropUrl}')`;
    
    // Poster
    const posterImg = document.getElementById('content-poster');
    posterImg.src = posterUrl;
    posterImg.alt = title;
    
    // Title
    document.getElementById('content-title').textContent = title;
    
    // Meta info
    let metaInfo;
    if (type === 'movie') {
      metaInfo = [
        `<span class="bg-yellow-600 text-black px-2 py-1 rounded font-bold">${content.vote_average.toFixed(1)}</span>`,
        formatDate(content.release_date),
        formatRuntime(content.runtime),
        `<span class="bg-gray-700 px-2 py-1 rounded text-sm">${content.adult ? 'R' : 'PG-13'}</span>`
      ];
    } else {
      metaInfo = [
        `<span class="bg-yellow-600 text-black px-2 py-1 rounded font-bold">${content.vote_average.toFixed(1)}</span>`,
        formatDate(content.first_air_date),
        `${content.number_of_seasons} Season${content.number_of_seasons !== 1 ? 's' : ''}`,
        `<span class="bg-gray-700 px-2 py-1 rounded text-sm">${content.adult ? 'R' : 'TV-14'}</span>`
      ];
    }
    document.getElementById('content-meta').innerHTML = metaInfo.join('');
    
    // Genres
    const genresHtml = content.genres.map(genre => 
      `<span class="bg-red-600 text-white px-3 py-1 rounded-full text-sm">${genre.name}</span>`
    ).join('');
    document.getElementById('content-genres').innerHTML = genresHtml;
    
    // Watch now button
    const watchBtn = document.getElementById('watch-now-btn');
    watchBtn.href = createUrl(`/watch?type=${type}&id=${content.id}&title=${encodeURIComponent(title)}`);
    
    // Show/hide episode selector for TV shows
    const episodeBtn = document.getElementById('select-episode-btn');
    if (type === 'tv') {
      episodeBtn.classList.remove('hidden');
      setupEpisodeSelector(content);
    } else {
      episodeBtn.classList.add('hidden');
    }
    
    // Find streaming button
    document.getElementById('find-streaming-btn').onclick = () => searchStreamingServices(title, type === 'movie' ? content.release_date?.split('-')[0] : content.first_air_date?.split('-')[0]);
    
    // Overview
    document.getElementById('content-overview').textContent = content.overview;
    
    // Cast
    const castHtml = cast.map(actor => `
      <div class="text-center">
        <img 
          src="${getImageUrl(actor.profile_path, 'w185')}" 
          alt="${actor.name}"
          class="w-full aspect-[2/3] object-cover rounded-lg mb-2"
        />
        <p class="font-semibold text-white text-sm">${actor.name}</p>
        <p class="text-gray-400 text-xs">${actor.character}</p>
      </div>
    `).join('');
    document.getElementById('cast-grid').innerHTML = castHtml;
    
    // Details
    let detailsHtml;
    if (type === 'movie') {
      detailsHtml = `
        <div class="bg-gray-800 rounded-lg p-4">
          <h3 class="font-semibold text-white mb-2">Budget</h3>
          <p class="text-gray-300">${content.budget ? '$' + content.budget.toLocaleString() : 'Unknown'}</p>
        </div>
        <div class="bg-gray-800 rounded-lg p-4">
          <h3 class="font-semibold text-white mb-2">Revenue</h3>
          <p class="text-gray-300">${content.revenue ? '$' + content.revenue.toLocaleString() : 'Unknown'}</p>
        </div>
        <div class="bg-gray-800 rounded-lg p-4">
          <h3 class="font-semibold text-white mb-2">Status</h3>
          <p class="text-gray-300">${content.status}</p>
        </div>
      `;
    } else {
      detailsHtml = `
        <div class="bg-gray-800 rounded-lg p-4">
          <h3 class="font-semibold text-white mb-2">Seasons</h3>
          <p class="text-gray-300">${content.number_of_seasons}</p>
        </div>
        <div class="bg-gray-800 rounded-lg p-4">
          <h3 class="font-semibold text-white mb-2">Episodes</h3>
          <p class="text-gray-300">${content.number_of_episodes}</p>
        </div>
        <div class="bg-gray-800 rounded-lg p-4">
          <h3 class="font-semibold text-white mb-2">Status</h3>
          <p class="text-gray-300">${content.status}</p>
        </div>
      `;
    }
    document.getElementById('content-details').innerHTML = detailsHtml;
  }
  
  // Episode selector functionality (for TV shows)
  function setupEpisodeSelector(show) {
    const selectEpisodeBtn = document.getElementById('select-episode-btn');
    const closeEpisodeSelector = document.getElementById('close-episode-selector');
    const episodeSelector = document.getElementById('episode-selector');
    
    selectEpisodeBtn?.addEventListener('click', toggleEpisodeSelector);
    closeEpisodeSelector?.addEventListener('click', closeEpisodeSelectorPanel);
    
    async function toggleEpisodeSelector() {
      if (isEpisodeSelectorOpen) {
        closeEpisodeSelectorPanel();
      } else {
        openEpisodeSelectorPanel();
      }
    }
    
    async function openEpisodeSelectorPanel() {
      isEpisodeSelectorOpen = true;
      episodeSelector.classList.remove('hidden');
      
      await loadSeasons(show);
      await loadEpisodes(1);
    }
    
    function closeEpisodeSelectorPanel() {
      isEpisodeSelectorOpen = false;
      episodeSelector.classList.add('hidden');
    }
    
    async function loadSeasons(show) {
      const seasonTabs = document.getElementById('season-tabs');
      const numSeasons = show.number_of_seasons || 1;
      
      let seasonsHtml = '';
      for (let i = 1; i <= numSeasons; i++) {
        seasonsHtml += `
          <button 
            class="season-tab px-4 py-2 rounded ${i === 1 ? 'bg-red-600 text-white' : 'bg-gray-700 text-gray-300'} hover:bg-red-500 transition-colors"
            data-season="${i}"
          >
            Season ${i}
          </button>
        `;
      }
      seasonTabs.innerHTML = seasonsHtml;
      
      document.querySelectorAll('.season-tab').forEach(tab => {
        tab.addEventListener('click', async (e) => {
          const season = parseInt(e.target.dataset.season);
          currentSeason = season;
          
          document.querySelectorAll('.season-tab').forEach(t => {
            t.className = 'season-tab px-4 py-2 rounded bg-gray-700 text-gray-300 hover:bg-red-500 transition-colors';
          });
          e.target.className = 'season-tab px-4 py-2 rounded bg-red-600 text-white hover:bg-red-500 transition-colors';
          
          await loadEpisodes(season);
        });
      });
    }
    
    async function loadEpisodes(season) {
      const episodeGrid = document.getElementById('episode-grid');
      const episodesLoading = document.getElementById('episodes-loading');
      
      episodesLoading.classList.remove('hidden');
      episodeGrid.innerHTML = '';
      
      try {
        const response = await fetch(`${BASE_URL}/tv/${contentId}/season/${season}?api_key=${API_KEY}`);
        
        if (!response.ok) throw new Error('Failed to fetch episodes');
        
        const seasonData = await response.json();
        episodesLoading.classList.add('hidden');
        
        seasonData.episodes.forEach((episode) => {
          const episodeCard = document.createElement('div');
          episodeCard.className = 'bg-gray-700 rounded-lg p-4 hover:bg-gray-600 transition-colors cursor-pointer';
          
          const stillPath = episode.still_path 
            ? getImageUrl(episode.still_path, 'w300')
            : '/images/placeholder-poster.jpg';
          
          episodeCard.innerHTML = `
            <div class="aspect-video bg-gray-800 rounded-lg mb-3 overflow-hidden">
              <img src="${stillPath}" alt="${episode.name}" class="w-full h-full object-cover">
            </div>
            <div class="flex items-start justify-between mb-2">
              <h3 class="text-white font-semibold text-sm">${episode.episode_number}. ${episode.name}</h3>
              <span class="text-gray-400 text-xs">${episode.runtime || 45}m</span>
            </div>
            <p class="text-gray-300 text-xs line-clamp-2">${episode.overview || 'No description available.'}</p>
            <div class="mt-3">
              <span class="text-yellow-400 text-xs">${episode.vote_average ? episode.vote_average.toFixed(1) : 'N/A'}</span>
            </div>
          `;
          
          episodeCard.addEventListener('click', () => {
            const watchUrl = createUrl(`/watch?type=tv&id=${contentId}&title=${encodeURIComponent(show.name)}&season=${season}&episode=${episode.episode_number}`);
            window.location.href = watchUrl;
          });
          
          episodeGrid.appendChild(episodeCard);
        });
        
      } catch (error) {
        console.error('Error loading episodes:', error);
        episodesLoading.classList.add('hidden');
        episodeGrid.innerHTML = '<p class="text-gray-400 col-span-full text-center">Failed to load episodes. Please try again later.</p>';
      }
    }
  }
  
  // Initialize page
  async function initializePage() {
    try {
      console.log('Starting page initialization...');
      console.log('API_KEY available:', !!API_KEY);
      console.log('BASE_URL:', BASE_URL);
      
      const urlData = parseUrl();
      console.log('URL data:', urlData);
      
      if (!urlData) {
        throw new Error('No content specified');
      }
      
      contentType = urlData.type;
      contentId = urlData.id;
      
      console.log('Fetching content for type:', contentType, 'id:', contentId);
      const { content, cast } = await fetchContentData(contentType, contentId);
      console.log('Content fetched successfully:', content);
      
      populateContent(content, cast, contentType);
      
      // Hide loading, show content
      document.getElementById('loading-screen').classList.add('hidden');
      document.getElementById('content-wrapper').classList.remove('hidden');
    } catch (error) {
      console.error('Error in initializePage:', error);
      // Hide loading, show error
      document.getElementById('loading-screen').classList.add('hidden');
      document.getElementById('error-screen').classList.remove('hidden');
    }
  }
  
  // Streaming services search function
  window.searchStreamingServices = function(title, year) {
    const services = [
      { name: 'Netflix', url: `https://www.netflix.com/search?q=${encodeURIComponent(title)}` },
      { name: 'Amazon Prime', url: `https://www.amazon.com/s?k=${encodeURIComponent(title)}&i=instant-video` },
      { name: 'Hulu', url: `https://www.hulu.com/search?q=${encodeURIComponent(title)}` },
      { name: 'Disney+', url: `https://www.disneyplus.com/search/${encodeURIComponent(title)}` },
      { name: 'HBO Max', url: `https://www.hbomax.com/search?q=${encodeURIComponent(title)}` }
    ];
    
    const servicesList = services.map(service => 
      `<a href="${service.url}" target="_blank" rel="noopener noreferrer" class="block p-2 hover:bg-gray-700 transition-colors">${service.name}</a>`
    ).join('');
    
    const popup = document.createElement('div');
    popup.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
    popup.innerHTML = `
      <div class="bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4">
        <h3 class="text-xl font-bold text-white mb-4">Find "${title}" on Streaming Services</h3>
        <div class="space-y-2">
          ${servicesList}
        </div>
        <button onclick="this.parentElement.parentElement.remove()" class="mt-4 btn-secondary w-full">Close</button>
      </div>
    `;
    document.body.appendChild(popup);
  };
  
  // Start when page loads
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializePage);
  } else {
    initializePage();
  }
</script>

<style>
  .text-shadow {
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
  }
  
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

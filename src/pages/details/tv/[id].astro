---
import Layout from '../../../layouts/Layout.astro';
import Navbar from '../../../components/Navbar.astro';
import WatchlistButton from '../../../components/WatchlistButton';
import { fetchFromTMDB, tmdbEndpoints, getImageUrl, formatDate } from '../../../lib/tmdb';

export async function getStaticPaths() {
  // Generate static paths for popular TV shows
  try {
    const popularTvData = await fetchFromTMDB(tmdbEndpoints.popularTv);
    
    return popularTvData.results.slice(0, 40).map(show => ({
      params: { id: show.id.toString() }
    }));
  } catch (error) {
    console.error('Error generating static paths for TV:', error);
    // Return some fallback popular TV show IDs
    return [
      { params: { id: '1399' } }, // Game of Thrones
      { params: { id: '60735' } }, // The Flash
      { params: { id: '1396' } }, // Breaking Bad
      { params: { id: '46261' } }, // Better Call Saul
      { params: { id: '1402' } }, // The Walking Dead
    ];
  }
}

const { id } = Astro.params;

let show;
let cast = [];
let error = null;

try {
  show = await fetchFromTMDB(tmdbEndpoints.tvDetails(parseInt(id)));
  
  const credits = await fetchFromTMDB(`/tv/${id}/credits`);
  cast = credits.cast.slice(0, 10);
} catch (e) {
  error = e.message;
  console.error('Error fetching TV show details:', e);
}

if (error || !show) {
  return new Response(null, {
    status: 404,
    statusText: 'TV show not found'
  });
}

const backdropUrl = show.backdrop_path 
  ? getImageUrl(show.backdrop_path, 'original')
  : getImageUrl(show.poster_path, 'original');

const posterUrl = getImageUrl(show.poster_path, 'w500');
---

<Layout title={`${show.name} - NotFlix`} description={show.overview}>
  <Navbar />
  
  <!-- Hero Section -->
  <section class="relative h-[70vh] flex items-end overflow-hidden">
    <div 
      class="absolute inset-0 bg-cover bg-center"
      style={`background-image: url('${backdropUrl}')`}
    ></div>
    <div class="absolute inset-0 bg-gradient-to-t from-gray-900 via-gray-900/70 to-transparent"></div>
    
    <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-16">
      <div class="flex flex-col md:flex-row gap-8 items-end">
        <div class="flex-shrink-0">
          <img 
            src={posterUrl} 
            alt={show.name}
            class="w-64 h-96 object-cover rounded-lg shadow-2xl"
          />
        </div>
        
        <div class="flex-1 text-white">
          <h1 class="text-4xl md:text-6xl font-bold mb-4 text-shadow">
            {show.name}
          </h1>
          
          <div class="flex flex-wrap items-center gap-4 mb-6 text-lg">
            <span class="bg-yellow-600 text-black px-2 py-1 rounded font-bold">
              {show.vote_average.toFixed(1)}
            </span>
            <span>{formatDate(show.first_air_date)}</span>
            <span>{show.number_of_seasons} Season{show.number_of_seasons !== 1 ? 's' : ''}</span>
            <span>{show.number_of_episodes} Episodes</span>
          </div>
          
          <p class="text-xl mb-6 max-w-3xl text-shadow">
            {show.overview}
          </p>
          
          <div class="flex flex-wrap gap-2 mb-6">
            {show.genres.map((genre) => (
              <span class="bg-gray-800 bg-opacity-80 px-3 py-1 rounded-full text-sm">
                {genre.name}
              </span>
            ))}
          </div>
          
          <div class="flex flex-wrap gap-4">
            <a 
              href={`/watch?type=tv&id=${show.id}&title=${encodeURIComponent(show.name)}`}
              class="btn-primary text-lg px-8 py-3 no-underline"
            >
              <i class="fas fa-play mr-2"></i>
              Watch Now
            </a>
            <button 
              id="select-episode-btn"
              class="btn-secondary text-lg px-8 py-3"
            >
              <i class="fas fa-list mr-2"></i>
              Select Episode
            </button>
            <button 
              onclick={`searchStreamingServices('${show.name}', ${show.first_air_date ? show.first_air_date.split('-')[0] : 'null'})`}
              class="btn-secondary text-lg px-8 py-3"
            >
              <i class="fas fa-external-link-alt mr-2"></i>
              Find Streaming
            </button>
            <WatchlistButton 
              movieId={show.id}
              mediaType="tv"
              title={show.name}
              posterPath={show.poster_path}
              client:load
            />
          </div>
        </div>
      </div>
    </div>
  </section>
  
  <!-- Episode Selector Section (Hidden by default) -->
  <section id="episode-selector" class="bg-gray-800 border-t border-gray-700 overflow-hidden transition-all duration-500 ease-in-out max-h-0 opacity-0">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="flex items-center justify-between mb-6">
        <h2 class="text-3xl font-bold text-white">Episodes</h2>
        <button id="close-episode-selector" class="text-gray-400 hover:text-white transition-colors">
          <i class="fas fa-times text-xl"></i>
        </button>
      </div>
      
      <!-- Season Tabs -->
      <div id="season-tabs" class="flex flex-wrap gap-2 mb-6 border-b border-gray-600 pb-4">
        <!-- Season tabs will be dynamically populated -->
      </div>
      
      <!-- Episode Grid -->
      <div id="episode-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <!-- Episodes will be dynamically populated -->
      </div>
      
      <!-- Loading State -->
      <div id="episodes-loading" class="text-center py-12">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-red-600 mx-auto mb-4"></div>
        <p class="text-gray-400">Loading episodes...</p>
      </div>
    </div>
  </section>
  
  <!-- Details Section -->
  <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-12">
      <div class="lg:col-span-2 space-y-8">
        <!-- Cast -->
        {cast.length > 0 && (
          <section>
            <h2 class="text-2xl font-bold text-white mb-6">Cast</h2>
            <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-4">
              {cast.map((actor) => (
                <div class="text-center">
                  <img 
                    src={actor.profile_path ? getImageUrl(actor.profile_path, 'w185') : '/images/placeholder-person.jpg'}
                    alt={actor.name}
                    class="w-full aspect-square object-cover rounded-lg mb-2"
                  />
                  <h3 class="text-white font-semibold text-sm">{actor.name}</h3>
                  <p class="text-gray-400 text-xs">{actor.character}</p>
                </div>
              ))}
            </div>
          </section>
        )}
        
        <!-- Show Details -->
        <section>
          <h2 class="text-2xl font-bold text-white mb-6">Show Details</h2>
          <div class="bg-gray-800 rounded-lg p-6 space-y-4">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <h3 class="text-gray-400 text-sm mb-1">First Air Date</h3>
                <p class="text-white">{formatDate(show.first_air_date)}</p>
              </div>
              <div>
                <h3 class="text-gray-400 text-sm mb-1">Last Air Date</h3>
                <p class="text-white">{formatDate(show.last_air_date)}</p>
              </div>
              <div>
                <h3 class="text-gray-400 text-sm mb-1">Seasons</h3>
                <p class="text-white">{show.number_of_seasons}</p>
              </div>
              <div>
                <h3 class="text-gray-400 text-sm mb-1">Episodes</h3>
                <p class="text-white">{show.number_of_episodes}</p>
              </div>
              <div>
                <h3 class="text-gray-400 text-sm mb-1">Language</h3>
                <p class="text-white">{show.original_language.toUpperCase()}</p>
              </div>
              <div>
                <h3 class="text-gray-400 text-sm mb-1">Status</h3>
                <p class="text-white">{show.status}</p>
              </div>
            </div>
          </div>
        </section>
      </div>
      
      <div class="space-y-8">
        <section class="bg-gray-800 rounded-lg p-6">
          <h3 class="text-xl font-bold text-white mb-4">Rating & Reviews</h3>
          <div class="space-y-4">
            <div class="flex items-center justify-between">
              <span class="text-gray-400">TMDB Rating</span>
              <span class="text-yellow-400 font-bold text-lg">
                {show.vote_average.toFixed(1)}/10
              </span>
            </div>
            <div class="flex items-center justify-between">
              <span class="text-gray-400">Vote Count</span>
              <span class="text-white">{show.vote_count.toLocaleString()}</span>
            </div>
            <div class="flex items-center justify-between">
              <span class="text-gray-400">Popularity</span>
              <span class="text-white">{Math.round(show.popularity)}</span>
            </div>
          </div>
        </section>
        
        {show.networks && show.networks.length > 0 && (
          <section class="bg-gray-800 rounded-lg p-6">
            <h3 class="text-xl font-bold text-white mb-4">Networks</h3>
            <div class="space-y-2">
              {show.networks.map((network) => (
                <div class="flex items-center space-x-3">
                  {network.logo_path && (
                    <img 
                      src={getImageUrl(network.logo_path, 'w92')}
                      alt={network.name}
                      class="w-8 h-8 object-contain"
                    />
                  )}
                  <span class="text-white text-sm">{network.name}</span>
                </div>
              ))}
            </div>
          </section>
        )}
      </div>
    </div>
  </main>
</Layout>

<script>
  // Function to search for streaming services
  function searchStreamingServices(title, year) {
    const query = year ? `${title} ${year}` : title;
    
    // Try multiple streaming services
    const services = [
      { name: 'Netflix', url: `https://www.netflix.com/search?q=${encodeURIComponent(query)}` },
      { name: 'Amazon Prime', url: `https://www.amazon.com/s?k=${encodeURIComponent(query)}&i=prime-instant-video` },
      { name: 'Hulu', url: `https://www.hulu.com/search?q=${encodeURIComponent(query)}` },
      { name: 'Disney+', url: `https://www.disneyplus.com/search?q=${encodeURIComponent(query)}` },
      { name: 'HBO Max', url: `https://play.hbomax.com/search?q=${encodeURIComponent(query)}` },
      { name: 'JustWatch', url: `https://www.justwatch.com/us/search?q=${encodeURIComponent(query)}` }
    ];
    
    // Create a modal with streaming options
    const modal = document.createElement('div');
    modal.style.cssText = `
      position: fixed; top: 0; left: 0; width: 100%; height: 100%; 
      background: rgba(0,0,0,0.8); z-index: 1000; display: flex; 
      align-items: center; justify-content: center; padding: 20px;
    `;
    
    modal.innerHTML = `
      <div style="background: #1a1a1a; border-radius: 12px; padding: 30px; max-width: 500px; width: 100%;">
        <h3 style="color: white; margin-bottom: 20px; text-align: center;">Find "${title}" on Streaming Services</h3>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
          ${services.map(service => `
            <a href="${service.url}" target="_blank" 
               style="background: #e50914; color: white; padding: 12px 20px; border-radius: 6px; 
                      text-decoration: none; text-align: center; font-weight: 600; transition: background 0.3s;"
               onmouseover="this.style.background='#f40612'" 
               onmouseout="this.style.background='#e50914'">
              ${service.name}
            </a>
          `).join('')}
        </div>
        <button onclick="this.parentElement.parentElement.remove()" 
                style="background: #666; color: white; border: none; padding: 10px 20px; 
                       border-radius: 6px; margin-top: 20px; width: 100%; cursor: pointer;">
          Close
        </button>
      </div>
    `;
    
    modal.addEventListener('click', (e) => {
      if (e.target === modal) modal.remove();
    });
    
    document.body.appendChild(modal);
  }
  
  // Make function global
  window.searchStreamingServices = searchStreamingServices;
  
  // Episode Selector Functionality
  const showId = window.SHOW_DATA?.id || null;
  const showTitle = window.SHOW_DATA?.name || 'Unknown';
  let currentSeason = 1;
  let isEpisodeSelectorOpen = false;
  
  document.addEventListener('DOMContentLoaded', () => {
    const selectEpisodeBtn = document.getElementById('select-episode-btn');
    const closeEpisodeSelector = document.getElementById('close-episode-selector');
    const episodeSelector = document.getElementById('episode-selector');
    const seasonTabs = document.getElementById('season-tabs');
    const episodeGrid = document.getElementById('episode-grid');
    const episodesLoading = document.getElementById('episodes-loading');
    
    // Toggle episode selector
    selectEpisodeBtn?.addEventListener('click', toggleEpisodeSelector);
    closeEpisodeSelector?.addEventListener('click', closeEpisodeSelectorPanel);
    
    async function toggleEpisodeSelector() {
      if (isEpisodeSelectorOpen) {
        closeEpisodeSelectorPanel();
      } else {
        openEpisodeSelectorPanel();
      }
    }
    
    async function openEpisodeSelectorPanel() {
      isEpisodeSelectorOpen = true;
      episodeSelector.style.maxHeight = '1000px';
      episodeSelector.style.opacity = '1';
      
      // Load seasons first
      await loadSeasons();
      
      // Load episodes for first season
      await loadEpisodes(1);
    }
    
    function closeEpisodeSelectorPanel() {
      isEpisodeSelectorOpen = false;
      episodeSelector.style.maxHeight = '0';
      episodeSelector.style.opacity = '0';
    }
    
    async function loadSeasons() {
      try {
        // Create season tabs based on show data
        const numSeasons = window.SHOW_DATA?.number_of_seasons || 10;
        seasonTabs.innerHTML = '';
        
        for (let i = 1; i <= numSeasons; i++) {
          const tab = document.createElement('button');
          tab.className = 'px-4 py-2 rounded-lg font-medium transition-colors ' + (i === 1 ? 'bg-red-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600');
          tab.textContent = 'Season ' + i;
          tab.addEventListener('click', () => selectSeason(i));
          seasonTabs.appendChild(tab);
        }
      } catch (error) {
        console.error('Error loading seasons:', error);
      }
    }
    
    async function selectSeason(season) {
      currentSeason = season;
      
      // Update active tab
      const tabs = seasonTabs.querySelectorAll('button');
      tabs.forEach((tab, index) => {
        if (index === season - 1) {
          tab.className = 'px-4 py-2 rounded-lg font-medium transition-colors bg-red-600 text-white';
        } else {
          tab.className = 'px-4 py-2 rounded-lg font-medium transition-colors bg-gray-700 text-gray-300 hover:bg-gray-600';
        }
      });
      
      // Load episodes for selected season
      await loadEpisodes(season);
    }
    
    async function loadEpisodes(season) {
      episodesLoading.style.display = 'block';
      episodeGrid.innerHTML = '';
      
      try {
        const response = await fetch('https://api.themoviedb.org/3/tv/' + showId + '/season/' + season + '?api_key=' + window.TMDB_API_KEY);
        
        if (!response.ok) throw new Error('Failed to fetch episodes');
        
        const seasonData = await response.json();
        episodesLoading.style.display = 'none';
        
        // Create episode cards
        seasonData.episodes.forEach((episode, index) => {
          const episodeCard = document.createElement('div');
          episodeCard.className = 'bg-gray-700 rounded-lg p-4 hover:bg-gray-600 transition-colors cursor-pointer';
          
          const stillPath = episode.still_path 
            ? 'https://image.tmdb.org/t/p/w300' + episode.still_path
            : '/images/placeholder-poster.jpg';
          
          episodeCard.innerHTML = 
            '<div class="aspect-video bg-gray-800 rounded-lg mb-3 overflow-hidden">' +
              '<img src="' + stillPath + '" alt="' + episode.name + '" class="w-full h-full object-cover">' +
            '</div>' +
            '<div class="flex items-start justify-between mb-2">' +
              '<h3 class="text-white font-semibold text-sm">' + episode.episode_number + '. ' + episode.name + '</h3>' +
              '<span class="text-gray-400 text-xs">' + (episode.runtime || 45) + 'm</span>' +
            '</div>' +
            '<p class="text-gray-300 text-xs line-clamp-2">' + (episode.overview || 'No description available.') + '</p>' +
            '<div class="mt-3">' +
              '<span class="text-yellow-400 text-xs">' + (episode.vote_average ? episode.vote_average.toFixed(1) : 'N/A') + '</span>' +
            '</div>';
          
          // Add click handler to watch episode
          episodeCard.addEventListener('click', () => {
            const watchUrl = '/watch?type=tv&id=' + showId + '&title=' + encodeURIComponent(showTitle) + '&season=' + season + '&episode=' + episode.episode_number;
            window.location.href = watchUrl;
          });
          
          episodeGrid.appendChild(episodeCard);
        });
        
      } catch (error) {
        console.error('Error loading episodes:', error);
        episodesLoading.style.display = 'none';
        episodeGrid.innerHTML = '<p class="text-gray-400 col-span-full text-center">Failed to load episodes. Please try again later.</p>';
      }
    }
  });
</script>

<script define:vars={{ showData: { id: show.id, name: show.name, number_of_seasons: show.number_of_seasons }, apiKey: import.meta.env.PUBLIC_TMDB_API_KEY }}>
  // Set global data for episode selector
  window.SHOW_DATA = showData;
  window.TMDB_API_KEY = apiKey;
</script>
